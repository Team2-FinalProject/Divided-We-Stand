[{"D:\\Hacktiv8\\Practice\\Phase3\\dws\\src\\index.js":"1","D:\\Hacktiv8\\Practice\\Phase3\\dws\\src\\App.js":"2","D:\\Hacktiv8\\Practice\\Phase3\\dws\\src\\reportWebVitals.js":"3","D:\\Hacktiv8\\Practice\\Phase3\\dws\\src\\pages\\index.js":"4","D:\\Hacktiv8\\Practice\\Phase3\\dws\\src\\pages\\Home.js":"5","D:\\Hacktiv8\\Practice\\Phase3\\dws\\src\\pages\\Game.js":"6","D:\\Hacktiv8\\Practice\\Phase3\\dws\\src\\components\\Board.js":"7","D:\\Hacktiv8\\Practice\\Phase3\\dws\\src\\js\\game.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":382,"mtime":1608039142232,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":82,"mtime":1608049418406,"results":"13","hashOfConfig":"10"},{"size":151,"mtime":1607839059758,"results":"14","hashOfConfig":"10"},{"size":182,"mtime":1608049370021,"results":"15","hashOfConfig":"10"},{"size":328,"mtime":1608051382754,"results":"16","hashOfConfig":"10"},{"size":9686,"mtime":1608047621335,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"8zglsw",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},"D:\\Hacktiv8\\Practice\\Phase3\\dws\\src\\index.js",[],["36","37"],"D:\\Hacktiv8\\Practice\\Phase3\\dws\\src\\App.js",[],"D:\\Hacktiv8\\Practice\\Phase3\\dws\\src\\reportWebVitals.js",[],"D:\\Hacktiv8\\Practice\\Phase3\\dws\\src\\pages\\index.js",[],"D:\\Hacktiv8\\Practice\\Phase3\\dws\\src\\pages\\Home.js",[],"D:\\Hacktiv8\\Practice\\Phase3\\dws\\src\\pages\\Game.js",[],"D:\\Hacktiv8\\Practice\\Phase3\\dws\\src\\components\\Board.js",[],"D:\\Hacktiv8\\Practice\\Phase3\\dws\\src\\js\\game.js",["38","39","40","41"],"import Phaser from 'phaser'\r\nimport React from 'react'\r\n\r\n// export default function game(){\r\n\r\n//     return(\r\n\r\n//     )\r\n// }\r\n\r\nvar audio = new Audio(require(\"../sound/PUNCH.mp3\"))\r\nvar music;\r\nvar meteor;\r\nvar meteor2;\r\nvar emitter;\r\nvar emitter2;\r\nvar rightGoal;\r\nvar leftGoal;\r\nvar particles\r\nvar particles2\r\nvar control\r\nvar goalSound;\r\nvar bgm;\r\nvar scorep1 = 0\r\nvar scorep2 = 0\r\nvar scoreText\r\n\r\nexport const config = {\r\n    type: Phaser.AUTO,\r\n    width: '100%',\r\n    height: '100%',\r\n    backgroundColor: '#cdcdcd',\r\n    physics: {\r\n        default: 'arcade',\r\n        arcade: {\r\n            // debug: true,\r\n            gravity: { y: 0 }\r\n        }\r\n    },\r\n    scene: {\r\n        preload: preload,\r\n        create: create,\r\n        update: update,\r\n        pack: {\r\n            files: [\r\n                { type: 'scenePlugin', key: 'SpinePlugin', url: 'plugins/SpinePlugin.js', sceneKey: 'spine' }\r\n            ]\r\n        }\r\n    },\r\n    audio:{\r\n        disableWebAudio: false,\r\n        context: audio.webkitMatchesSelector(true)\r\n    }\r\n}\r\n\r\nfunction preload() {\r\n    this.load.setPath('assets/spine/stretchyman/');\r\n    this.load.spine('stretchyman', 'stretchyman-pro.json', ['stretchyman-pma.atlas'], true);\r\n    this.load.image('meteor', '../../image/meteor-min.png');\r\n    this.load.image('particle', '../../image/api.png');\r\n    this.load.image('background', '../../background/blackhole.jpg');\r\n    this.load.image('pow', '../../image/hit.gif');\r\n    this.load.image('goal', '../../image/blackhole.png')\r\n    this.load.image('hitarea', '../../image/hitround.png')\r\n    this.load.audio('hit', ['../../sound/PUNCH.ogg','../../sound/PUNCH.mp3'])\r\n    this.load.audio('goal', ['../../sound/selected.ogg','../../sound/selected.mp3'])\r\n    this.load.audio('bgm', ['../../sound/fightSoundtrack.ogg','../../sound/fightSoundtrack.mp3'])\r\n}\r\n\r\nfunction generateChar({ pos, scale, flipper }) {\r\n    var char = this.add.spine(pos.x, pos.y, 'stretchyman').setScale(scale.x, scale.y).refresh();\r\n    this.physics.add.existing(char)\r\n    if (flipper === true) {\r\n        char.body.setSize(-char.width, char.height)\r\n        char.body.immovable = true\r\n    } else {\r\n        char.body.setSize(char.width, char.height)\r\n        char.body.immovable = true\r\n    }\r\n    char.body.setCollideWorldBounds(true);\r\n    // char.body.setBounce(0.1, 0.1)\r\n    // char.drawDebug = true\r\n    char.refresh()\r\n    return char\r\n}\r\n\r\nfunction assignControlToChar(char, obj) {\r\n    var controlBones = [\"front-leg-ik-target\", \"hip\"];\r\n    // var controlBones = [\"front-leg-ik-target\", \"hip\", \"back-leg-ik-target\"];\r\n    if (obj === \"feet\") {\r\n        let bone = char.findBone(controlBones[0]);\r\n        var control = this.physics.add.image(bone.worldX, 670 - (bone.worldY), 'hitarea').setData('bone', bone).setScale(0.3, 0.3);\r\n            control.body.immovable = true\r\n            control.setBounce(3, 3)\r\n            control.setCollideWorldBounds(true)\r\n\r\n            control.setInteractive();\r\n\r\n            this.input.setDraggable(control);\r\n            this.input.on('drag', function (pointer, gameObject, dragX, dragY) {\r\n\r\n                gameObject.x = dragX;\r\n                gameObject.y = dragY;\r\n    \r\n                var bone = gameObject.getData('bone');\r\n    \r\n                var coords = this.spine.worldToLocal(dragX, dragY, char.skeleton, bone);\r\n    \r\n                bone.x = coords.x;\r\n                bone.y = coords.y;\r\n                \r\n                bone.update();\r\n                char.refresh()\r\n            }, this);\r\n            return control\r\n    } else if (obj === \"hip\") {\r\n        let bone = char.findBone(controlBones[1]);\r\n        var controlHip = this.add.circle(bone.worldX, 800 - (bone.worldY), 10, 0xff00000).setData('bone', bone);\r\n            controlHip.setInteractive();\r\n\r\n            this.input.setDraggable(controlHip);\r\n            this.input.on('drag', function (pointer, gameObject, dragX, dragY) {\r\n\r\n                gameObject.x = dragX;\r\n                gameObject.y = dragY;\r\n    \r\n                var bone = gameObject.getData('bone');\r\n    \r\n                var coords = this.spine.worldToLocal(dragX, dragY, char.skeleton, bone);\r\n    \r\n                bone.x = coords.x;\r\n                bone.y = coords.y;\r\n                \r\n                bone.update();\r\n                char.refresh()\r\n            }, this);\r\n\r\n    }\r\n}\r\n\r\nfunction create() {\r\n\r\n    let image = this.add.image(\r\n        this.cameras.main.width / 2,\r\n        this.cameras.main.height / 2,\r\n        \"background\"\r\n    );\r\n    let scaleX = this.cameras.main.width / image.width;\r\n    let scaleY = this.cameras.main.height / image.height;\r\n    let scale = Math.max(scaleX, scaleY);\r\n\r\n    image.setScale(scale).setScrollFactor(0);\r\n\r\n\r\n    //SCORE\r\n    scoreText = this.add.text(616,310, `${scorep1}:${scorep2}`, {fontSize: '70px', fill: '#ffffff'})\r\n    \r\n    //END SCORE\r\n\r\n    //MUSIC ASSIGN\r\n    music = this.sound.add('hit',{\r\n        volume: 0.09\r\n    })\r\n\r\n    goalSound = this.sound.add('goal',{\r\n        volume: 0.1\r\n    })\r\n    bgm = this.sound.add('bgm',{\r\n        volume: 0.1\r\n    })\r\n    //ENDMUSIC ASSIGN\r\n\r\n    let char = generateChar.bind(this)\r\n    let control = assignControlToChar.bind(this)\r\n\r\n    let char1 = char({\r\n        pos: { x: 400, y: 500 },\r\n        scale: { x: 0.3, y: 0.3 },\r\n        flipper: false\r\n    })\r\n    let char2 = char({\r\n        pos: { x: 900, y: 500 },\r\n        scale: { x: -0.3, y: 0.3 },\r\n        flipper: true\r\n    })\r\n\r\n    let control1 = control(char1, \"feet\")\r\n    let control1Hip1 = control(char1, \"hip\")\r\n    let control2 = control(char2, \"feet\")\r\n    let control1Hip2 = control(char2, \"hip\")\r\n\r\n    console.log('char----->', char1)\r\n    console.log(this.sound.add('hit'), '<<<<<<<<<<audio bos')\r\n    console.log('----->', this.children)\r\n\r\n    // this.physics.add.collider(char2, char1, (parent, key, value) => {\r\n    //     console.log('damage hero 1', parent, key, value)\r\n    // })\r\n\r\n    // this.physics.add.collider(char2, char1, () => {\r\n    //     console.log('damage hero 1')\r\n    // })\r\n\r\n    //METEOR\r\n    particles = this.add.particles('particle');\r\n    particles2 = this.add.particles('particle');\r\n    emitter = particles.createEmitter({\r\n        speed: 100,\r\n        scale: { start: 0.03, end: 0 },\r\n        blendMode: 'NORMAL'\r\n    });\r\n    emitter2 = particles2.createEmitter({\r\n        speed: 100,\r\n        scale: { start: 0.03, end: 0 },\r\n        blendMode: 'NORMAL'\r\n    });\r\n\r\n    meteor = this.physics.add.image(100, 100, 'meteor').setScale(0.1, 0.1);\r\n    meteor.enableBody = true\r\n    meteor.setVelocity(330, 50);\r\n    meteor.setBounce(1, 1);\r\n    meteor.setCollideWorldBounds(true);\r\n\r\n    emitter.startFollow(meteor);\r\n\r\n    meteor2 = this.physics.add.image(1000, 100, 'meteor').setScale(0.1, 0.1);\r\n    meteor2.enableBody = true\r\n    meteor2.setVelocity(600, 50);\r\n    meteor2.setBounce(1, 1);\r\n    meteor2.setCollideWorldBounds(true);\r\n\r\n    emitter2.startFollow(meteor2);\r\n\r\n    //END METEOR\r\n\r\n    //GAWANG\r\n    leftGoal = this.physics.add.image(100, 350, 'goal').setScale(0.5, 0.5);\r\n    leftGoal.body.setSize(100, 100)\r\n    leftGoal.body.immovable = true\r\n    rightGoal = this.physics.add.image(1250, 350, 'goal').setScale(0.5, 0.5);\r\n    rightGoal.body.setSize(100, 100)\r\n    rightGoal.body.immovable = true\r\n    //END GAWANG\r\n\r\n    // var shooter = this.physics.add.image(char1.x, char1.y, 'hitarea').setScale(0.5, 0.5);\r\n    // shooter.body.setSize(100, 100)\r\n    // shooter.setBounce(2, 2);\r\n    // shooter.body.immovable = true\r\n\r\n    \r\n    bgm.play()\r\n    \r\n    // this.sound.setDecodedCallback(music, this);\r\n    this.physics.add.collider(meteor,char1, () =>{\r\n        music.play();\r\n    })\r\n    this.physics.add.collider(meteor2,char1, () =>{\r\n        music.play();\r\n    })\r\n    this.physics.add.collider(meteor,char2, () =>{\r\n        music.play();\r\n    })\r\n    this.physics.add.collider(meteor2,char2, () =>{\r\n        music.play();\r\n    })\r\n    this.physics.add.collider(char1, char2, () => {\r\n        console.log('kena');\r\n    })\r\n    this.physics.add.collider(meteor, control1, () =>{\r\n        music.play();\r\n    })\r\n    this.physics.add.collider(meteor2, control1, () =>{\r\n        music.play();\r\n    })\r\n    this.physics.add.collider(meteor, control2, () =>{\r\n        music.play();\r\n    })\r\n    this.physics.add.collider(meteor2, control2, () =>{\r\n        music.play();\r\n    })\r\n    \r\n}\r\n\r\nfunction update () {\r\n    meteor.rotation += 0.10;\r\n    meteor2.rotation += 0.10;\r\n    emitter.rotation += 0.10;\r\n    emitter2.rotation += 0.10;\r\n    rightGoal.rotation += 0.002;\r\n    leftGoal.rotation -= 0.002;\r\n\r\n    this.physics.add.collider(meteor, leftGoal,goalp2, () => {\r\n        meteor.destroy()\r\n        particles.destroy()\r\n        goalSound.play()\r\n    })\r\n    this.physics.add.collider(meteor2, leftGoal, goalp2, () => {\r\n        meteor2.destroy()\r\n        particles2.destroy()\r\n        goalSound.play()\r\n    })\r\n    this.physics.add.collider(meteor, rightGoal,goalp1, () => {\r\n        meteor.destroy()\r\n        particles.destroy()\r\n        goalSound.play()\r\n    })\r\n    this.physics.add.collider(meteor2, rightGoal,goalp1, () => {\r\n        meteor2.destroy()\r\n        particles2.destroy()\r\n        goalSound.play()\r\n    })\r\n\r\n    function goalp1(){\r\n        scorep1 += 1\r\n        scoreText.text = `${scorep1}:${scorep2}`\r\n    }\r\n    function goalp2(){\r\n        scorep2 += 1\r\n        scoreText.text = `${scorep1}:${scorep2}`\r\n    }\r\n}\r\n\r\n// function fadePicture(effect) {\r\n//     this.add.tween(effect).to( { alpha: 0 }, 2000, Phaser.Easing.Linear.None, true);\r\n// }\r\n\r\n// function destroyMeteor (meteor, leftGoal) {\r\n//     console.log('masuuuk');\r\n//     meteor.destroy()\r\n// }",{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":2,"column":8,"nodeType":"48","messageId":"49","endLine":2,"endColumn":13},{"ruleId":"46","severity":1,"message":"50","line":21,"column":5,"nodeType":"48","messageId":"49","endLine":21,"endColumn":12},{"ruleId":"46","severity":1,"message":"51","line":188,"column":9,"nodeType":"48","messageId":"49","endLine":188,"endColumn":21},{"ruleId":"46","severity":1,"message":"52","line":190,"column":9,"nodeType":"48","messageId":"49","endLine":190,"endColumn":21},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'control' is defined but never used.","'control1Hip1' is assigned a value but never used.","'control1Hip2' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]