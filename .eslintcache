[{"/home/rivari/Documents/game/Divided-We-Stand/src/index.js":"1","/home/rivari/Documents/game/Divided-We-Stand/src/reportWebVitals.js":"2","/home/rivari/Documents/game/Divided-We-Stand/src/App.js":"3","/home/rivari/Documents/game/Divided-We-Stand/src/store/index.js":"4","/home/rivari/Documents/game/Divided-We-Stand/src/pages/Home.jsx":"5","/home/rivari/Documents/game/Divided-We-Stand/src/pages/Lobby.jsx":"6","/home/rivari/Documents/game/Divided-We-Stand/src/pages/Room.jsx":"7","/home/rivari/Documents/game/Divided-We-Stand/src/connection/socket.js":"8","/home/rivari/Documents/game/Divided-We-Stand/src/components/CardRoom.jsx":"9","/home/rivari/Documents/game/Divided-We-Stand/src/components/Board.js":"10","/home/rivari/Documents/game/Divided-We-Stand/src/js/game.js":"11","/home/rivari/Documents/game/Divided-We-Stand/src/pages/Game.js":"12","/home/rivari/Documents/game/Divided-We-Stand/src/pages/Finish.jsx":"13","/home/rivari/Documents/game/Divided-We-Stand/src/js/newgame.js":"14"},{"size":565,"mtime":1608056006461,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1608056006461,"results":"17","hashOfConfig":"16"},{"size":823,"mtime":1608148753035,"results":"18","hashOfConfig":"16"},{"size":717,"mtime":1608056006461,"results":"19","hashOfConfig":"16"},{"size":2139,"mtime":1608134057726,"results":"20","hashOfConfig":"16"},{"size":2217,"mtime":1608141736256,"results":"21","hashOfConfig":"16"},{"size":2297,"mtime":1608140911476,"results":"22","hashOfConfig":"16"},{"size":128,"mtime":1608133565741,"results":"23","hashOfConfig":"16"},{"size":2464,"mtime":1608211508532,"results":"24","hashOfConfig":"16"},{"size":620,"mtime":1608129700084,"results":"25","hashOfConfig":"16"},{"size":17381,"mtime":1608236606334,"results":"26","hashOfConfig":"16"},{"size":1844,"mtime":1608228027496,"results":"27","hashOfConfig":"16"},{"size":136,"mtime":1608238948149,"results":"28","hashOfConfig":"16"},{"size":8470,"mtime":1608226599403,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"102pgw3",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/rivari/Documents/game/Divided-We-Stand/src/index.js",[],["65","66"],"/home/rivari/Documents/game/Divided-We-Stand/src/reportWebVitals.js",[],"/home/rivari/Documents/game/Divided-We-Stand/src/App.js",[],"/home/rivari/Documents/game/Divided-We-Stand/src/store/index.js",[],"/home/rivari/Documents/game/Divided-We-Stand/src/pages/Home.jsx",["67","68","69","70"],"import React, { useState, useEffect } from \"react\";\nimport { Button, Container } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport socket from \"../connection/socket\";\nimport { useDispatch } from 'react-redux'\nimport { v4 as uuidv4 } from \"uuid\";\n// import { SET_PLAYERS } from '../store/actions/socket'\nimport \"../App.css\";\nimport img from '../assets/coollogo_com-13460545.png'\nimport '../Home.css'\n// export default function Home() {\n//   return (\n//     <div className=\"mainpage\">\n//       <div className=\"nes-field\">\n//         <label for=\"name_field\">Your name</label>\n//         <input type=\"text\" id=\"name_field\" className=\"nes-input\" />\n//       </div>\n//       <button\n//         type=\"button\"\n//         className=\"nes-btn is-success\"\n//         style={{ width: 200 }}\n//       >\n//         Start\n//       </button>\n//     </div>\n\n\nexport default function Home() {\n  // console.log(socket)\n  const history = useHistory();\n  const [username, setUsername] = useState(\"\");\n  const dispatch = useDispatch()\n\n  const handleLogin = (e) => {\n    e.preventDefault();\n    let id = uuidv4()\n    localStorage.setItem(\"username\", username);\n    localStorage.setItem(\"id\", id);\n    history.push(\"/lobby\")\n    const data = {\n      username, id\n    }\n    // socket.emit(\"login\", username);\n    dispatch({type:'server/players', data});\n    // dispatch(SET_PLAYERS)\n};\n\n  const handleUsername = (e) => {\n    setUsername(e.target.value);\n  };\n\n  return (\n    <div className=\"container mb-5 mt-5\">\n      <img src={img} className=\"mt-5 mb-5\" style={{ justifyContent: \"center\"}} alt=\"\"/>\n      <form onSubmit={handleLogin} className=\"form mt-5\">\n        <div className=\"form-group\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"input your name\"\n            onChange={handleUsername}\n            style={{ alignItems: \"center\", width: \"25rem\", textAlign: \"center\"}}\n          /> <br />\n          <div className=\"button\">\n            <button style={{alignItems: \"center\"}} type=\"submit\">Submit</button>\n\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n}\n","/home/rivari/Documents/game/Divided-We-Stand/src/pages/Lobby.jsx",["71","72","73"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { Button, Container, Form } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport CardRoom from \"../components/CardRoom\";\nimport socket from \"../connection/socket\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n\nexport default function Lobby() {\n  const dispatch = useDispatch();\n  const state = useSelector((state) => state);\n  const nameRoom = useRef();\n  const formRoom = useRef();\n  // const history = useHistory();\n  const [room, setRoom] = useState([]);\n\n  const handleSubmitRoom = (e) => {\n    e.preventDefault();\n    let roomName = nameRoom.current.value;\n    let payload = {\n      roomName,\n      id: uuidv4(),\n      roomMaster: {\n        id: localStorage.getItem(\"id\"),\n        username: localStorage.getItem(\"username\"),\n      },\n    };\n\n    // dispatch({type: 'server/createRoom', data: roomName})\n    socket.emit(\"createRoom\", payload)\n    formRoom.current.reset()\n    console.log(\"this\");\n  };\n\n  //belum kepake\n  useEffect(() => {\n    dispatch({ type: \"server/online\" });\n    dispatch({ type: \"server/rooms\" });\n    console.log(state.rooms.length, \",,, useeffect mounted\");\n    if (state.rooms.length > 0) {\n      setRoom(state.rooms);\n    }\n    socket.on(\"hello\", data => {\n      console.log(data, \"from lobby\");\n    })\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"createRoom\", (rooms) => {\n      setRoom(rooms);\n    });\n    socket.on(\"joinRoom\", (rooms) => {\n      setRoom(rooms);\n    });\n  }, [room]);\n  \n  return (\n    <section className=\"fight-screen\">\n      <div className=\"row lobby mb-4\">\n        <Form onSubmit={handleSubmitRoom} ref={formRoom} style={{ width: 2000}}>\n          <input\n            className=\"nes-textarea\"\n            placeholder=\"Create Room\"\n            ref={nameRoom}\n            required\n          ></input>\n          <Button type=\"submit\" className=\"nes-btn is-success\">\n            Submit\n          </Button>\n        </Form>\n      </div>\n\n      <div className=\"row d-flex justify-content-center\">\n\n        {room.map(item => (\n          <CardRoom data={item} key={item.id} />\n        ))}\n        \n      </div>\n    </section>\n  );\n}","/home/rivari/Documents/game/Divided-We-Stand/src/pages/Room.jsx",["74","75","76"],"import React, { useState, useEffect } from \"react\";\nimport { Container, Button } from \"react-bootstrap\";\nimport { useParams } from \"react-router-dom\";\nimport socket from \"../connection/socket\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Room() {\n  const { roomName } = useParams();\n  const [roomDetail, setRoomDetail] = useState(null);\n  const history = useHistory();\n\n  useEffect(() => {\n    socket.on(\"roomDetail\", (room) => {\n      setRoomDetail(room); // team1 nanda, team2 rivari, roomDetail.id\n    });\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"moveRoom\", (room) => {\n      // setRoomDetail(room); // team1 nanda, team2 rivari, roomDetail.id\n      history.push(`/game`);\n    });\n    // if (roomDetail) {\n    //   roomDetail.status === true && history.push(`/game/${roomDetail.name}`);\n    // }\n  }, [roomDetail])\n\n  const handleStartGame = () => {\n    console.log(\"this start game button\");\n    const payload = {\n      id: roomDetail.id,\n      name: roomDetail.name,\n    };\n    socket.emit(\"startGame\", payload)\n    // history.push(`/game/${roomName}`)\n  };\n\n  return (\n    <section style={{ height: \"80vh\" }}>\n      <div className=\"row justify-content-center align-content-center h-100 position-relative\">\n        <div className=\"d-flex\">\n          <div className=\"column\">\n            <div className=\"card player\">\n              <div className=\"card-body\">{roomDetail?.teamOne[0]}</div>\n            </div>\n            <div className=\"card player\">\n              <div className=\"card-body\">{roomDetail?.teamOne[1]}</div>\n            </div>\n          </div>\n          <div>\n            <img\n              className=\"versus-logo\"\n              src=\"https://www.dlf.pt/png/big/11/110833_versus-logo-png.png\"\n              alt=\"\"\n            />\n          </div>\n          <div className=\"column\">\n            <div className=\"card player\">\n              <div className=\"card-body\">{roomDetail?.teamTwo[0]}</div>\n            </div>\n            <div className=\"card player\">\n              <div className=\"card-body\">{roomDetail?.teamTwo[1]}</div>\n            </div>\n\n          </div>\n        </div>\n        <Button className=\"position-absolute mt-5\" style={{ top: \"68%\"}} onClick={handleStartGame}>\n          START\n        </Button>\n      </div>\n    </section>\n)\n}\n","/home/rivari/Documents/game/Divided-We-Stand/src/connection/socket.js",[],"/home/rivari/Documents/game/Divided-We-Stand/src/components/CardRoom.jsx",["77","78","79","80"],"import React, { useEffect } from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\nimport socket from \"../connection/socket\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function CardRoom(props) {\n  const { id, name, teamOne, teamTwo, status } = props.data;\n  const history = useHistory();\n\n  const handleJoinRoom = (id, name) => {\n    let payload = {\n      roomName: name,\n      idRoom: id,\n      username: localStorage.getItem(\"username\"),\n    };\n    socket.emit(\"joinRoom\", payload);\n    history.push(`/room/${name}`);\n  };\n\n  const handleJoinTeam = (tim) => {\n    let payload = {\n      roomName: name,\n      idRoom: id,\n      username: localStorage.getItem(\"username\"),\n      team: tim === 'team1' ? \"teamOne\" : \"teamTwo\"\n    };\n    socket.emit(\"joinRoom\", payload);\n    history.push(`/room/${name}`);\n  }\n\n  return (\n    <div className=\"nes-container with-title is-centered\">\n      <p className=\"title\">{name}</p>\n      <div className=\"d-flex justify-content-between\">\n        <div className=\"team-1\">\n          <span className=\"text-light\">Team 1</span>\n          {/* {teamOne.map((e) => (\n            <div className=\"card player\">\n              <div className=\"card-body\">{e}</div>\n            </div>\n          ))} */}\n          <div className=\"card player\">\n            <div className=\"card-body\">{teamOne[0]}</div>\n          </div>\n          {/* <div className=\"card player\">\n            <div className=\"card-body\">{teamOne[1]}</div>\n          </div> */}\n          <Button type=\"submit\" className=\"nes-btn is-success mt-3 mr-3\" onClick={() => handleJoinTeam('team1')}>\n            Join\n          </Button>\n        </div>\n        <div className=\"align-self-center\">\n          <span className=\"text-light\">VS</span>\n        </div>\n        \n        <div className=\"team-2\">\n          <span className=\"text-light\">Team 2</span>\n          {/* {teamTwo?.map((e) => (\n            <div className=\"card player\">\n              <div className=\"card-body\">{e}</div>\n            </div>\n          ))} */}\n          <div className=\"card player\">\n            <div className=\"card-body\">{teamTwo[0]}</div>\n          </div>\n          {/* <div className=\"card player\">\n            <div className=\"card-body\">{teamTwo[1]}</div>\n          </div> */}\n          <Button type=\"submit\" className=\"nes-btn is-success mt-3 mr-3\" onClick={() => handleJoinTeam('team2')}>\n            Join\n          </Button>\n        </div>\n      </div>\n    </div>\n      )\n}\n","/home/rivari/Documents/game/Divided-We-Stand/src/components/Board.js",[],"/home/rivari/Documents/game/Divided-We-Stand/src/js/game.js",["81","82","83","84","85","86","87","88","89","90"],"import Phaser from \"phaser\";\nimport socket from \"../connection/socket\";\n// import socket from '../connection/socket';\n\n//socket\nvar gamePlayers;\nvar boneX1 = 400\nvar boneY1 = 500;\n\nvar isPosUpdated = false;\n\nvar boneX2 = 900;\nvar boneY2 = 500;\n\nvar scoreOne = 0;\nvar scoreTwo = 0;\n\n\nsocket.on(\"updateBone\", (data) => {\n  // console.log(data, \"ini update bone\")\n  if (data.user.team === \"teamOne\") {\n    boneX1 = data.user.cordinatX;\n    boneY1 = data.user.cordinatY;\n  } else {\n    boneX2 = data.user.cordinatX;\n    boneY2 = data.user.cordinatY;\n  }\n  // console.log(boneX1, boneY1, \"char kiri\")\n  // console.log(boneX2, boneY2, \"char kanan\")\n  isPosUpdated = true;\n})\n\nsocket.on(\"startGame\", (data) => {\n  // console.log(data, \"geheheh\");\n  gamePlayers = data;\n});\n\n// console.log(gamePlayers, \"ini game players di global\")\n\nsocket.on(\"scoreP1\", (data) => {\n  scoreOne = data.scoreTeamOne;\n});\n\nsocket.on(\"scoreP1\", (data) => {\n  scoreTwo = data.scoreTeamTwo;\n});\n\n// console.log(boneX);\n// console.log(boneY, \"<<\");\n// setInterval(() => {\n//   console.log(boneX);\n//   console.log(boneY, \"<< dlm interval\");\n// }, 3000);\n\n//end socket\n\nvar audio = new Audio(require(\"../sound/PUNCH.mp3\"));\nvar music;\nvar meteor;\nvar meteor2;\nvar meteor3;\nvar emitter;\nvar emitter2;\nvar emitter3;\nvar rightGoal;\nvar leftGoal;\nvar particles;\nvar particles2;\nvar particles3;\nvar control;\nvar goalSound;\nvar bgm;\nvar scorep1 = 0;\nvar scorep2 = 0;\nvar scoreText;\n// var control1;\nvar control1Hip1;\n// var control2;\nvar control1Hip2;\nvar char1;\nvar char2;\n\nvar finish = 3;\nlocalStorage.removeItem(\"result\");\n\nconst config = (socket) => {\n  return {\n    type: Phaser.AUTO,\n    width: \"100%\",\n    height: \"100%\",\n    backgroundColor: \"#cdcdcd\",\n    physics: {\n      default: \"arcade\",\n      arcade: {\n        debug: true,\n        gravity: { y: 0 },\n      },\n    },\n    scene: {\n      preload: preload,\n      create: create,\n      update: update,\n      extend: { data: { socket } },\n      pack: {\n        files: [\n          {\n            type: \"scenePlugin\",\n            key: \"SpinePlugin\",\n            url: \"plugins/SpinePlugin.js\",\n            sceneKey: \"spine\",\n          },\n        ],\n      },\n    },\n    socket: socket,\n    audio: {\n      disableWebAudio: false,\n      context: audio.webkitMatchesSelector(true),\n    },\n    // autoCenter: Phaser.Scale.Center,\n  };\n};\n\nfunction preload() {\n  this.load.setPath(\"assets/spine/stretchyman/\");\n  this.load.spine(\n    \"stretchyman\",\n    \"stretchyman-pro.json\",\n    [\"stretchyman-pma.atlas\"],\n    true\n  );\n  this.load.image(\"meteor\", \"../../image/meteor-min.png\");\n  this.load.image(\"particle\", \"../../image/api.png\");\n  this.load.image(\"background\", \"../../background/blackhole.jpg\");\n  this.load.image(\"pow\", \"../../image/hit.gif\");\n  this.load.image(\"goal\", \"../../image/blackhole.png\");\n  this.load.image(\"hitarea\", \"../../image/hitround.png\");\n  this.load.audio(\"hit\", [\"../../sound/PUNCH.ogg\", \"../../sound/PUNCH.mp3\"]);\n  this.load.audio(\"goal\", [\n    \"../../sound/selected.ogg\",\n    \"../../sound/selected.mp3\",\n  ]);\n  this.load.audio(\"bgm\", [\n    \"../../sound/fightSoundtrack.ogg\",\n    \"../../sound/fightSoundtrack.mp3\",\n  ]);\n  // this.data.list.socket.on('hello', data => {\n  //     console.log(data,  \"<<< data di socket preload\")\n  //     gamePlayers = data\n  // })\n  // console.log(this.data.list.socket, \"<<< this di preload\")\n}\n\nfunction generateChar({ pos, scale, flipper }) {\n  var char = this.add\n    .spine(pos.x, pos.y, \"stretchyman\")\n    .setScale(scale.x, scale.y)\n    .refresh();\n  this.physics.add.existing(char);\n  if (flipper === true) {\n    // char.body.setSize(-char.width, char.height);\n    char.body.setCircle(250, 450, 0);\n    char.body.immovable = true;\n  } else {\n    // char.body.setSize(char.width, char.height);\n    char.body.setCircle(250, -150, 0);\n    char.body.immovable = true;\n  }\n  char.body.setCollideWorldBounds(true);\n  // char.body.setBounce(0.1, 0.1)\n  // char.drawDebug = true\n\n  char.refresh();\n  return char;\n}\n\nfunction assignControlToChar(char, obj) {\n  // var controlBones = [\"front-leg-ik-target\", \"hip\"];\n  var controlBones = [\"hip\"];\n\n  // var controlBones = [\"front-leg-ik-target\", \"hip\", \"back-leg-ik-target\"];\n  if (obj === \"feet\") {\n    let bone = char.findBone(controlBones[0]);\n    var control = this.physics.add\n      .image(bone.worldX, 670 - bone.worldY, \"hitarea\")\n      .setData(\"bone\", bone)\n      .setScale(0.3, 0.3);\n    control.body.setCircle(70);\n    control.body.immovable = true;\n    control.setBounce(3, 3);\n    control.setCollideWorldBounds(true);\n\n    control.setInteractive();\n\n    // this.input.setDraggable(control);\n    // this.input.on(\n    //   \"drag\",\n    //   function (pointer, gameObject, dragX, dragY) {\n    //     gameObject.x = dragX;\n    //     gameObject.y = dragY;\n    // bone.worldX, 800 - bone.worldY\n    //     var bone = gameObject.getData(\"bone\");\n\n    //     // let charObj;\n    //     // if (el === control1 || el === control1Hip1) {\n    //     //   charObj = char1;\n    //     // } else {\n    //     //   charObj = char2;\n    //     // }\n\n    //     var coords = this.spine.worldToLocal(dragX, dragY, char.skeleton, bone);\n\n    //     // this.data.list.socket.on('updateBone', payload => {\n    //     //     bone.x = payload.x;\n    //     //     bone.y = payload.y;\n\n    //     // })\n\n    //     let cordinat = {\n    //       x: coords.x,bone.worldX, 800 - bone.worldY\n    //       y: coords.y,\n    //       username: localStorage.getItem(\"username\"),\n    //     };\n    //     this.data.list.socket.emit(\"moveBone\", cordinat);\n\n    //     console.log(boneX, boneY, \"ini di func\")\n    //     bone.x = boneX;\n    //     bone.y = boneY;\n\n    //     // hipX = bone.x controlHip\n    //     // hipY = bone.y\n\n    //     bone.update();\n    //     char.refresh();\n    //   },\n    //   thisbone.worldX, 800 - bone.worldY\n    // );\n\n    return control;\n  } else if (obj === \"hip\") {\n    // let bone = char.findBone(controlBones[1]);\n    let bone = char.findBone(controlBones[0]);\n    var controlHip = this.add\n      .circle(bone.worldX, 800 - bone.worldY, 10, 0xff00000)\n      .setData(\"bone\", bone);\n    controlHip.setInteractive();\n    // this.input.setDraggable(controlHip);\n    // this.input.on(\n    //   \"drag\",\n    //   function (pointer, gameObject, dragX, dragY) {\n    //     gameObject.x = dragX;\n    //     gameObject.y = dragY;\n\n    //     var bone = gameObject.getData(\"bone\");\n\n    //     let charObj;\n    //     // if (el === control1 || el === control1Hip1) {\n    //     //   charObj = char1;\n    //     // } else {\n    //     //   charObj = char2;\n    //     // }\n\n    //     var coords = this.spine.worldToLocal(dragX, dragY, char.skeleton, bone);\n\n    //     // this.data.list.socket.on('updateBone', payload => {\n    //     //     bone.x = payload.x;\n    //     //     bone.y = payload.y;\n\n    //     // })\n\n    //     bone.x = coords.x;\n    //     bone.y = coords.y;\n\n    //     // hipX = bone.x\n    //     // hipY = bone.y\n\n    //     bone.update();\n    //     char.refresh();\n    //   },\n    //   this\n    // );\n    return controlHip;\n  }\n}\n\nfunction create() {\n\n\n  // socket = io('http://localhost:3000')\n  // console.log(this.socket,'ini socket nya bosss -<<<<<')\n  //   console.log(this.input,'ini this input')\n  // this.socket.on('hello', (data) =>{\n  //     console.log(data, 'helonnya socket on')\n  // })\n\n  var self = this;\n  //   this.socket = socket;\n  //   this.socket.on(\"hello\", (data) => {\n  //     console.log(data, \"ini halo pls bisa\");\n  //   });\n\n  // this.socket.on(\"hello\", data => {\n  //     console.log(data, \",,, data di create\")\n  // }) gagal\n\n  let image = this.add.image(\n    this.cameras.main.width / 2,\n    this.cameras.main.height / 2,\n    \"background\"\n  );\n  let scaleX = this.cameras.main.width / image.width;\n  let scaleY = this.cameras.main.height / image.height;\n  let scale = Math.max(scaleX, scaleY);\n\n  image.setScale(scale).setScrollFactor(0);\n\n  //SCORE\n  scoreText = this.add.text(616, 310, `${scorep1}:${scorep2}`, {\n    fontSize: \"70px\",\n    fill: \"#ffffff\",\n  });\n\n  console.log(control1Hip1, \"ini apa\");\n\n  //END SCORE\n\n  //MUSIC ASSIGN\n  music = this.sound.add(\"hit\", {\n    volume: 0.09,\n  });\n\n  goalSound = this.sound.add(\"goal\", {\n    volume: 1,\n  });\n  bgm = this.sound.add(\"bgm\", {\n    volume: 0.5,\n  });\n  //ENDMUSIC ASSIGN\n  \n  let char = generateChar.bind(this);\n  let control = assignControlToChar.bind(this);\n  \n  char1 = char({\n    pos: { x: 400, y: 500 },\n    scale: { x: 0.3, y: 0.3 },\n    flipper: false,\n  });\n  char2 = char({\n    pos: { x: 900, y: 500 },\n    scale: { x: -0.3, y: 0.3 },\n    flipper: true,\n  });\n\n  \n\n  // char1.x.update()\n  // char1.y.update()\n  // char2.x.update()\n  // char2.y.update()\n  // control1 = control(char1, \"feet\");\n  control1Hip1 = control(char1, \"hip\");\n  // control2 = control(char2, \"feet\");\n  control1Hip2 = control(char2, \"hip\");\n\n  //   console.log(char1.x ,'<>', boneX1 );\n  // char1.x = boneX1\n  // char1.y = boneY1\n\n  // char2.x = boneX2\n  // char2.y = boneY2\n  // char1.update()\n  // char2.update()\n  // char2.setPosition(boneX2, boneY2);\n  //   char1.update()\n  //   char2.update()\n  // char2.setPosition(boneX, boneY)\n  // control1Hip1.setPosition(1000, 600) // ini titik merah\n  //METEOR\n  // particles = this.add.particles(\"particle\");\n  // particles2 = this.add.particles(\"particle\");\n  // particles3 = this.add.particles(\"particle\");\n  // emitter = particles.createEmitter({\n  //   speed: 100,\n  //   scale: { start: 0.03, end: 0 },\n  //   blendMode: \"NORMAL\",\n  // });\n  // emitter2 = particles2.createEmitter({\n  //   speed: 100,\n  //   scale: { start: 0.03, end: 0 },\n  //   blendMode: \"NORMAL\",\n  // });\n  // emitter3 = particles3.createEmitter({\n  //   speed: 100,\n  //   scale: { start: 0.03, end: 0 },\n  //   blendMode: \"NORMAL\",\n  // });\n\n  meteor = this.physics.add.image(100, 100, \"meteor\").setScale(0.1, 0.1);\n  meteor.body.setCircle(250);\n  meteor.enableBody = true;\n  meteor.setVelocity(450, 50);\n  meteor.setBounce(1.01, 1.01);\n  meteor.setCollideWorldBounds(true);\n\n  // emitter.startFollow(meteor);\n\n  meteor2 = this.physics.add.image(700, 600, \"meteor\").setScale(0.1, 0.1);\n  meteor2.body.setCircle(250);\n  meteor2.enableBody = true;\n  meteor2.setVelocity(350, -450);\n  meteor2.setBounce(1.01, 1.01);\n  meteor2.setCollideWorldBounds(true);\n\n  // emitter2.startFollow(meteor2);\n\n  meteor3 = this.physics.add.image(1200, 100, \"meteor\").setScale(0.1, 0.1);\n  meteor3.body.setCircle(250);\n  meteor3.enableBody = true;\n  meteor3.setVelocity(-450, 50);\n  meteor3.setBounce(1.01, 1.01);\n  meteor3.setCollideWorldBounds(true);\n\n  // emitter3.startFollow(meteor3);\n  //\n  //END METEOR\n\n  //GAWANG\n  leftGoal = this.physics.add.image(100, 350, \"goal\").setScale(0.5, 0.5);\n  leftGoal.body.setSize(500, 500);\n  leftGoal.body.immovable = true;\n  rightGoal = this.physics.add.image(1250, 350, \"goal\").setScale(0.5, 0.5);\n  rightGoal.body.setSize(500, 500);\n  rightGoal.body.immovable = true;\n  //END GAWANG\n\n  bgm.play();\n\n  // this.sound.setDecodedCallback(music, this);\n  this.physics.add.collider(meteor, char1, () => {\n    music.play();\n  });\n  this.physics.add.collider(meteor2, char1, () => {\n    music.play();\n  });\n  this.physics.add.collider(meteor3, char1, () => {\n    music.play();\n  });\n  this.physics.add.collider(meteor, char2, () => {\n    music.play();\n  });\n  this.physics.add.collider(meteor2, char2, () => {\n    music.play();\n  });\n  this.physics.add.collider(meteor3, char2, () => {\n    music.play();\n  });\n  this.physics.add.collider(char1, char2, () => {\n    console.log(\"kena\");\n  });\n  // this.physics.add.collider(meteor, control1, () => {\n  //   music.play();\n  // });\n  // this.physics.add.collider(meteor2, control1, () => {\n  //   music.play();\n  // });\n  // this.physics.add.collider(meteor3, control1, () => {\n  //   music.play();\n  // });\n  // this.physics.add.collider(meteor, control2, () => {\n  //   music.play();\n  // });\n  // this.physics.add.collider(meteor2, control2, () => {\n  //   music.play();\n  // });\n  // this.physics.add.collider(meteor3, control2, () => {\n  //   music.play();\n  // });\n  this.physics.add.collider(meteor, meteor2, () => {\n    music.play();\n  });\n  this.physics.add.collider(meteor, meteor3, () => {\n    music.play();\n  });\n  this.physics.add.collider(meteor2, meteor3, () => {\n    music.play();\n  });\n\n  this.data.list.socket.on(\"hai\", (data) => {\n    console.log(data, \"ini di game\");\n  });\n\n  this.physics.add.collider(meteor, leftGoal, goalp2, () => {\n    meteor.destroy();\n    // particles.destroy();\n    goalSound.play();\n  });\n  this.physics.add.collider(meteor2, leftGoal, goalp2, () => {\n    meteor2.destroy();\n    // particles2.destroy();\n    goalSound.play();\n  });\n  this.physics.add.collider(meteor3, leftGoal, goalp2, () => {\n    meteor3.destroy();\n    // particles3.destroy();\n    goalSound.play();\n  });\n  this.physics.add.collider(meteor, rightGoal, goalp1, () => {\n    meteor.destroy();\n    // particles.destroy();\n    goalSound.play();\n  });\n  this.physics.add.collider(meteor2, rightGoal, goalp1, () => {\n    meteor2.destroy();\n    // particles2.destroy();\n    goalSound.play();\n  });\n  this.physics.add.collider(meteor3, rightGoal, goalp1, () => {\n    meteor3.destroy();\n    // particles3.destroy();\n    goalSound.play();\n  });\n\n  function goalp1() {\n    scorep1 += 1;\n    finish -= 1;\n    let payload = {\n      room: gamePlayers.room,\n      score: scorep1,\n      team: 'teamOne'\n    }\n    socket.emit('score', payload)\n    scoreText.text = `${scorep1}:${scorep2}`;\n  }\n  \n  function goalp2() {\n    scorep2 += 1;\n    finish -= 1;\n    let payload = {\n      room: gamePlayers.room,\n      score: scorep2,\n      team: 'teamTwo'\n    }\n    socket.emit('score', payload)\n    scoreText.text = `${scorep1}:${scorep2}`;\n  }\n\n  // control1Hip1.setPosition(boneX,boneY)\n}\n\n// function test (x, y) {\n//   console.log(boneX1, 'ni')\n//   // console.log(char1, \"ni char\")\n//   // char1.x = x\n//   // char1.y = y\n// }\n\nfunction update() {\n  // char1.setPosition()\n  // char kiri\n  // char1.x = boneX1\n  // char1.y = boneY1\n\n  // //character kanan\n  // char2.x = boneX2\n  // char2.y = boneY2\n  // console.log(char1, \"ini char 1 di update\", boneX1)\n\n  meteor.rotation += 0.1;\n  meteor2.rotation += 0.1;\n  meteor3.rotation += 0.1;\n  // emitter.rotation += 0.1;\n  // emitter2.rotation += 0.1;\n  // emitter3.rotation += 0.1;\n  rightGoal.rotation += 0.002;\n  leftGoal.rotation -= 0.002;\n\n  // function goalp1() {\n  //   scoreOne += 1;\n  //   finish -= 1;\n  //   let data = {\n  //     score: scoreOne,\n  //     username: localStorage.getItem('username'),\n  //     team: 'teamOne',\n  //     room: gamePlayers.room\n  //   }\n  //   socket.emit('goalP1', data)\n  //   console.log(finish);\n  //   scoreText.text = `${scoreOne}:${scoreTwo}`;\n  // }\n  // function goalp2() {\n  //   scoreTwo += 1;\n  //   finish -= 1;\n  //   let data = {\n  //     score: scoreTwo,\n  //     username: localStorage.getItem('username'),\n  //     team: 'teamTwo',\n  //     room: gamePlayers.room\n  //   }\n  //   console.log(finish);\n  //   socket.emit('goalP2', data)\n  //   scoreText.text = `${scoreOne}:${scoreTwo}`;\n  // }\n\n  // const players = [control1, control1Hip1, control2, control1Hip2];\n  const players = [control1Hip1, control1Hip2];\n  players.forEach((el) => {\n    // console.log(control1Hip1, \"ini\")\n    this.input.setDraggable(el);\n    this.input.on(\n      \"drag\",\n      function (pointer, gameObject, dragX, dragY) {\n        gameObject.x = dragX;\n        gameObject.y = dragY;\n\n        var bone = gameObject.getData(\"bone\");\n\n        let charObj;\n        // if (el === control1 || el === control1Hip1) {\n        if (el === control1Hip1) {\n          charObj = char1;\n        } else {\n          charObj = char2;\n        }\n\n        var coords = this.spine.worldToLocal(\n          dragX,\n          dragY,\n          charObj.skeleton,\n          bone\n        );\n        // let user = gamePlayers.room\n        // console.log(gamePlayers, \"game players di room\")\n        // console.log(dragX, \"< ini dragX, ini dragY >\", dragY)\n\n        let cordinat = {\n          x: dragX,\n          y: dragY,\n          username: localStorage.getItem(\"username\"),\n          room: gamePlayers.room,\n          player: localStorage.getItem(\"username\"),\n        };\n\n        // console.log(cordinat, \"ini player aktif\");\n\n        this.data.list.socket.emit(\"moveBone\", cordinat);\n\n        bone.x = coords.x;\n        bone.y = coords.y;\n\n        // hipX = bone.x\n        // hipY = bone.y\n\n        bone.update();\n        charObj.refresh();\n      },\n      this\n    );\n  });\n\n  // testing\n  // this.data.list.socket.on(\"hai\", (data) => {\n  //   console.log(data, \"data from update\");\n  //   gamePlayers = data;\n  // });\n  // control.setPosition(boneX, boneY)\n  // char1.setPosition(boneX, boneY)\n  if (isPosUpdated) {\n    // console.log(control1Hip1, \"ini apa\")\n    // control1Hip1.body.setPosition(boneX, boneY);\n    // char1.setPosition(boneX1, boneY1);\n    // char2.setPosition(boneX2, boneY2);\n    // char1.update()\n    // char2.update()\n    // console.log(char1.x ,'<>', boneX1 );\n    char1.x = boneX1\n    char1.y = boneY1\n    \n    char2.x = boneX2\n    char2.y = boneY2\n    // char1.update()\n    // char2.update()\n  }\n\n\n  if (finish === 0) {\n    localStorage.setItem(\"result\", \"endgame\");\n  }\n\n  //   console.log(gamePlayers, \"di dlm update\")\n}\n// console.log(gamePlayers, \"di ; update\");\n\nexport default config;\n","/home/rivari/Documents/game/Divided-We-Stand/src/pages/Game.js",["91"],"// import React, { useEffect, useState } from 'react'\n// import Board from '../components/Board'\n// import {useParams} from 'react-router-dom'\n// import socket from '../connection/socket'\n\n// export default function Game() {\n\n//     const { roomName } = useParams()\n//     const [roomDetail, setRoomDetail] = useState(null);\n\n//     useEffect(() => {\n//         socket.on(\"startGame\", (room) => {\n//             console.log(room, \"<,, start game\");\n//             setRoomDetail(room)\n//         })\n//     }, [])\n\n//     return (\n//         <>\n//             <Board />\n//         </>\n//     )\n// }\n\nimport React, { useState, useEffect } from 'react'\nimport Phaser from 'phaser'\nimport { IonPhaser } from '@ion-phaser/react'\nimport  config  from '../js/game'\nimport socket from '../connection/socket'\nimport { useHistory } from 'react-router-dom'\n\nexport default function Game() {\n\n  const [game, setGame] = useState()\n  const [result, setResult] = useState(localStorage.getItem('result'))\n  const [initialize, setinitialize] = useState(true)\n  // const [intervals, setIntervals] = useState()\n  const history = useHistory()\n\n  useEffect(() => {\n    // const configs = new Phaser.Game(config(socket))\n    const configs = new Phaser.Game(config(socket))\n    console.log(configs, \"<<< configs di board\")\n    // setInterval(() => {\n    // }, 500);\n    setGame(Object.assign({}, configs))\n  }, [])\n\n  let int = setInterval(() => {\n    setResult(localStorage.getItem('result'))\n  }, 1000)\n\n\n  useEffect(() => {\n    if(result === 'endgame') {\n      history.push('/finish')\n      setGame(null)\n      setinitialize(false)\n      clearInterval(int)\n      alert(\"game Finish\")\n    }\n    return () => {\n      setGame(null)\n      setinitialize(false)\n    }\n  }, [result])\n\n  return (\n    <>\n      <IonPhaser game={game} initialize={initialize} />\n    </>\n  )\n}","/home/rivari/Documents/game/Divided-We-Stand/src/pages/Finish.jsx",[],"/home/rivari/Documents/game/Divided-We-Stand/src/js/newgame.js",["92","93"],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":1,"column":27,"nodeType":"100","messageId":"101","endLine":1,"endColumn":36},{"ruleId":"98","severity":1,"message":"102","line":2,"column":10,"nodeType":"100","messageId":"101","endLine":2,"endColumn":16},{"ruleId":"98","severity":1,"message":"103","line":2,"column":18,"nodeType":"100","messageId":"101","endLine":2,"endColumn":27},{"ruleId":"98","severity":1,"message":"104","line":4,"column":8,"nodeType":"100","messageId":"101","endLine":4,"endColumn":14},{"ruleId":"98","severity":1,"message":"103","line":2,"column":18,"nodeType":"100","messageId":"101","endLine":2,"endColumn":27},{"ruleId":"98","severity":1,"message":"105","line":4,"column":10,"nodeType":"100","messageId":"101","endLine":4,"endColumn":20},{"ruleId":"106","severity":1,"message":"107","line":47,"column":6,"nodeType":"108","endLine":47,"endColumn":8,"suggestions":"109"},{"ruleId":"98","severity":1,"message":"103","line":2,"column":10,"nodeType":"100","messageId":"101","endLine":2,"endColumn":19},{"ruleId":"98","severity":1,"message":"110","line":8,"column":11,"nodeType":"100","messageId":"101","endLine":8,"endColumn":19},{"ruleId":"106","severity":1,"message":"111","line":26,"column":6,"nodeType":"108","endLine":26,"endColumn":18,"suggestions":"112"},{"ruleId":"98","severity":1,"message":"99","line":1,"column":17,"nodeType":"100","messageId":"101","endLine":1,"endColumn":26},{"ruleId":"98","severity":1,"message":"113","line":2,"column":10,"nodeType":"100","messageId":"101","endLine":2,"endColumn":14},{"ruleId":"98","severity":1,"message":"114","line":7,"column":39,"nodeType":"100","messageId":"101","endLine":7,"endColumn":45},{"ruleId":"98","severity":1,"message":"115","line":10,"column":9,"nodeType":"100","messageId":"101","endLine":10,"endColumn":23},{"ruleId":"98","severity":1,"message":"116","line":41,"column":3,"nodeType":"100","messageId":"101","endLine":41,"endColumn":11},{"ruleId":"98","severity":1,"message":"117","line":45,"column":3,"nodeType":"100","messageId":"101","endLine":45,"endColumn":11},{"ruleId":"98","severity":1,"message":"118","line":62,"column":5,"nodeType":"100","messageId":"101","endLine":62,"endColumn":12},{"ruleId":"98","severity":1,"message":"119","line":63,"column":5,"nodeType":"100","messageId":"101","endLine":63,"endColumn":13},{"ruleId":"98","severity":1,"message":"120","line":64,"column":5,"nodeType":"100","messageId":"101","endLine":64,"endColumn":13},{"ruleId":"98","severity":1,"message":"121","line":67,"column":5,"nodeType":"100","messageId":"101","endLine":67,"endColumn":14},{"ruleId":"98","severity":1,"message":"122","line":68,"column":5,"nodeType":"100","messageId":"101","endLine":68,"endColumn":15},{"ruleId":"98","severity":1,"message":"123","line":69,"column":5,"nodeType":"100","messageId":"101","endLine":69,"endColumn":15},{"ruleId":"98","severity":1,"message":"124","line":70,"column":5,"nodeType":"100","messageId":"101","endLine":70,"endColumn":12},{"ruleId":"98","severity":1,"message":"125","line":296,"column":7,"nodeType":"100","messageId":"101","endLine":296,"endColumn":11},{"ruleId":"106","severity":1,"message":"126","line":66,"column":6,"nodeType":"108","endLine":66,"endColumn":14,"suggestions":"127"},{"ruleId":"98","severity":1,"message":"116","line":14,"column":5,"nodeType":"100","messageId":"101","endLine":14,"endColumn":13},{"ruleId":"98","severity":1,"message":"117","line":15,"column":5,"nodeType":"100","messageId":"101","endLine":15,"endColumn":13},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Container' is defined but never used.","'socket' is defined but never used.","'useHistory' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'state.rooms'. Either include them or remove the dependency array.","ArrayExpression",["130"],"'roomName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["131"],"'Card' is defined but never used.","'status' is assigned a value but never used.","'handleJoinRoom' is assigned a value but never used.","'scoreOne' is assigned a value but never used.","'scoreTwo' is assigned a value but never used.","'emitter' is defined but never used.","'emitter2' is defined but never used.","'emitter3' is defined but never used.","'particles' is defined but never used.","'particles2' is defined but never used.","'particles3' is defined but never used.","'control' is defined but never used.","'self' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'int'. Either include them or remove the dependency array.",["132"],"no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [dispatch, state.rooms]",{"range":"139","text":"140"},"Update the dependencies array to be: [history, roomDetail]",{"range":"141","text":"142"},"Update the dependencies array to be: [history, int, result]",{"range":"143","text":"144"},[1380,1382],"[dispatch, state.rooms]",[837,849],"[history, roomDetail]",[1746,1754],"[history, int, result]"]