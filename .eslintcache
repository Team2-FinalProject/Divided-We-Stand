[{"/home/rivari/Documents/game/Divided-We-Stand/src/index.js":"1","/home/rivari/Documents/game/Divided-We-Stand/src/reportWebVitals.js":"2","/home/rivari/Documents/game/Divided-We-Stand/src/App.js":"3","/home/rivari/Documents/game/Divided-We-Stand/src/store/index.js":"4","/home/rivari/Documents/game/Divided-We-Stand/src/pages/Home.jsx":"5","/home/rivari/Documents/game/Divided-We-Stand/src/pages/Lobby.jsx":"6","/home/rivari/Documents/game/Divided-We-Stand/src/pages/Room.jsx":"7","/home/rivari/Documents/game/Divided-We-Stand/src/pages/Game.jsx":"8","/home/rivari/Documents/game/Divided-We-Stand/src/connection/socket.js":"9","/home/rivari/Documents/game/Divided-We-Stand/src/components/CardRoom.jsx":"10","/home/rivari/Documents/game/Divided-We-Stand/src/components/Board.js":"11","/home/rivari/Documents/game/Divided-We-Stand/src/js/game.js":"12"},{"size":565,"mtime":1608056006461,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1608056006461,"results":"15","hashOfConfig":"14"},{"size":715,"mtime":1608117248439,"results":"16","hashOfConfig":"14"},{"size":717,"mtime":1608056006461,"results":"17","hashOfConfig":"14"},{"size":2114,"mtime":1608125606373,"results":"18","hashOfConfig":"14"},{"size":2138,"mtime":1608125606373,"results":"19","hashOfConfig":"14"},{"size":2355,"mtime":1608125606373,"results":"20","hashOfConfig":"14"},{"size":539,"mtime":1608125606373,"results":"21","hashOfConfig":"14"},{"size":128,"mtime":1608056006461,"results":"22","hashOfConfig":"14"},{"size":2050,"mtime":1608125606373,"results":"23","hashOfConfig":"14"},{"size":620,"mtime":1608125606373,"results":"24","hashOfConfig":"14"},{"size":10372,"mtime":1608126601267,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"102pgw3",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},"/home/rivari/Documents/game/Divided-We-Stand/src/index.js",[],["57","58"],"/home/rivari/Documents/game/Divided-We-Stand/src/reportWebVitals.js",[],"/home/rivari/Documents/game/Divided-We-Stand/src/App.js",[],"/home/rivari/Documents/game/Divided-We-Stand/src/store/index.js",[],"/home/rivari/Documents/game/Divided-We-Stand/src/pages/Home.jsx",["59","60","61","62"],"import React, { useState, useEffect } from \"react\";\nimport { Button, Container } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport socket from \"../connection/socket\";\nimport { useDispatch } from 'react-redux'\nimport { v4 as uuidv4 } from \"uuid\";\n// import { SET_PLAYERS } from '../store/actions/socket'\nimport \"../App.css\";\nimport img from '../assets/coollogo_com-13460545.png'\nimport '../Home.css'\n// export default function Home() {\n//   return (\n//     <div className=\"mainpage\">\n//       <div className=\"nes-field\">\n//         <label for=\"name_field\">Your name</label>\n//         <input type=\"text\" id=\"name_field\" className=\"nes-input\" />\n//       </div>\n//       <button\n//         type=\"button\"\n//         className=\"nes-btn is-success\"\n//         style={{ width: 200 }}\n//       >\n//         Start\n//       </button>\n//     </div>\n\n\nexport default function Home() {\n  const history = useHistory();\n  const [username, setUsername] = useState(\"\");\n  const dispatch = useDispatch()\n\n  const handleLogin = (e) => {\n    e.preventDefault();\n    let id = uuidv4()\n    localStorage.setItem(\"username\", username);\n    localStorage.setItem(\"id\", id);\n    history.push(\"/lobby\")\n    const data = {\n      username, id\n    }\n    // socket.emit(\"login\", username);\n    dispatch({type:'server/players', data});\n    // dispatch(SET_PLAYERS)\n};\n\n  const handleUsername = (e) => {\n    setUsername(e.target.value);\n  };\n\n  return (\n    <div className=\"container mb-5 mt-5\">\n      <img src={img} className=\"mt-5 mb-5\" style={{ justifyContent: \"center\"}} alt=\"\"/>\n      <form onSubmit={handleLogin} className=\"form mt-5\">\n        <div className=\"form-group\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"input your name\"\n            onChange={handleUsername}\n            style={{ alignItems: \"center\", width: \"25rem\", textAlign: \"center\"}}\n          /> <br />\n          <div className=\"button\">\n            <button style={{alignItems: \"center\"}} type=\"submit\">Submit</button>\n\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n}\n","/home/rivari/Documents/game/Divided-We-Stand/src/pages/Lobby.jsx",["63","64","65"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { Button, Container, Form } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport CardRoom from \"../components/CardRoom\";\nimport socket from \"../connection/socket\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n\nexport default function Lobby() {\n  const dispatch = useDispatch();\n  const state = useSelector((state) => state);\n  const nameRoom = useRef();\n  const formRoom = useRef();\n  // const history = useHistory();\n  const [room, setRoom] = useState([]);\n\n  const handleSubmitRoom = (e) => {\n    e.preventDefault();\n    let roomName = nameRoom.current.value;\n    let payload = {\n      roomName,\n      id: uuidv4(),\n      roomMaster: {\n        id: localStorage.getItem(\"id\"),\n        username: localStorage.getItem(\"username\"),\n      },\n    };\n\n    // dispatch({type: 'server/createRoom', data: roomName})\n    socket.emit(\"createRoom\", payload)\n    formRoom.current.reset()\n    console.log(\"this\");\n  };\n\n  //belum kepake\n  useEffect(() => {\n    dispatch({ type: \"server/online\" });\n    dispatch({ type: \"server/rooms\" });\n    console.log(state.rooms.length, \",,, useeffect mounted\");\n    if (state.rooms.length > 0) {\n      setRoom(state.rooms);\n    }\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"createRoom\", (rooms) => {\n      setRoom(rooms);\n    });\n    socket.on(\"joinRoom\", (rooms) => {\n      setRoom(rooms);\n    });\n  }, [room]);\n  \n  return (\n    <section className=\"fight-screen\">\n      <div className=\"row lobby mb-4\">\n        <Form onSubmit={handleSubmitRoom} ref={formRoom} style={{ width: 2000}}>\n          <input\n            className=\"nes-textarea\"\n            placeholder=\"Create Room\"\n            ref={nameRoom}\n            required\n          ></input>\n          <Button type=\"submit\" className=\"nes-btn is-success\">\n            Submit\n          </Button>\n        </Form>\n      </div>\n\n      <div className=\"row d-flex justify-content-center\">\n\n        {room.map(item => (\n          <CardRoom data={item} key={item.id} />\n        ))}\n        \n      </div>\n    </section>\n  );\n}","/home/rivari/Documents/game/Divided-We-Stand/src/pages/Room.jsx",["66","67","68"],"import React, { useState, useEffect } from \"react\";\nimport { Container, Button } from \"react-bootstrap\";\nimport { useParams } from \"react-router-dom\";\nimport socket from \"../connection/socket\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Room() {\n  const { roomName } = useParams();\n  const [roomDetail, setRoomDetail] = useState(null);\n  const history = useHistory();\n\n  useEffect(() => {\n    socket.on(\"roomDetail\", (room) => {\n      setRoomDetail(room); // team1 nanda, team2 rivari, roomDetail.id\n    });\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"moveRoom\", (room) => {\n      // setRoomDetail(room); // team1 nanda, team2 rivari, roomDetail.id\n      console.log(room, \"<< room di room js 'moveRoom'\");\n      history.push(`/game`);\n    });\n    // if (roomDetail) {\n    //   roomDetail.status === true && history.push(`/game/${roomDetail.name}`);\n    // }\n  }, [roomDetail])\n\n  const handleStartGame = () => {\n    console.log(\"this start game button\");\n    const payload = {\n      id: roomDetail.id,\n      name: roomDetail.name,\n    };\n    socket.emit(\"startGame\", payload)\n    // history.push(`/game/${roomName}`)\n  };\n\n  return (\n    <section style={{ height: \"80vh\" }}>\n      <div className=\"row justify-content-center align-content-center h-100 position-relative\">\n        <div className=\"d-flex\">\n          <div className=\"column\">\n            <div className=\"card player\">\n              <div className=\"card-body\">{roomDetail?.teamOne[0]}</div>\n            </div>\n            <div className=\"card player\">\n              <div className=\"card-body\">{roomDetail?.teamOne[1]}</div>\n            </div>\n          </div>\n          <div>\n            <img\n              className=\"versus-logo\"\n              src=\"https://www.dlf.pt/png/big/11/110833_versus-logo-png.png\"\n              alt=\"\"\n            />\n          </div>\n          <div className=\"column\">\n            <div className=\"card player\">\n              <div className=\"card-body\">{roomDetail?.teamTwo[0]}</div>\n            </div>\n            <div className=\"card player\">\n              <div className=\"card-body\">{roomDetail?.teamTwo[1]}</div>\n            </div>\n\n          </div>\n        </div>\n        <Button className=\"position-absolute mt-5\" style={{ top: \"68%\"}} onClick={handleStartGame}>\n          START\n        </Button>\n      </div>\n    </section>\n)\n}\n","/home/rivari/Documents/game/Divided-We-Stand/src/pages/Game.jsx",["69","70"],"import React, { useEffect, useState } from 'react'\nimport Board from '../components/Board'\nimport {useParams} from 'react-router-dom'\nimport socket from '../connection/socket'\n\nexport default function Game() {\n\n    const { roomName } = useParams()\n    const [roomDetail, setRoomDetail] = useState(null);\n\n    useEffect(() => {\n        socket.on(\"startGame\", (room) => {\n            console.log(room, \"<,, start game\");\n            setRoomDetail(room)\n        })\n    }, [])\n\n    return (\n        <>\n            <Board />\n        </>\n    )\n}","/home/rivari/Documents/game/Divided-We-Stand/src/connection/socket.js",[],"/home/rivari/Documents/game/Divided-We-Stand/src/components/CardRoom.jsx",["71","72","73"],"import React, { useEffect } from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\nimport socket from \"../connection/socket\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function CardRoom(props) {\n  const { id, name, teamOne, teamTwo, status } = props.data;\n  const history = useHistory();\n\n  const handleJoinTeam = (tim) => {\n    let payload = {\n      roomName: name,\n      idRoom: id,\n      username: localStorage.getItem(\"username\"),\n      team: tim === 'team1' ? \"teamOne\" : \"teamTwo\"\n    };\n    socket.emit(\"joinRoom\", payload);\n    history.push(`/room/${name}`);\n  }\n\n  return (\n    <div className=\"nes-container with-title is-centered mt-3\">\n      <p className=\"title\">{name}</p>\n      <div className=\"d-flex justify-content-between\">\n        <div className=\"team-1\">\n          <span className=\"text-light\">Team 1</span>\n          <div className=\"card player\">\n            <div className=\"card-body\">{teamOne[0]}</div>\n          </div>\n          <div className=\"card player\">\n            <div className=\"card-body\">{teamOne[1]}</div>\n          </div>\n          <Button type=\"submit\" className=\"nes-btn is-success mt-3 mr-3\" onClick={() => handleJoinTeam('team1')}>\n            Join\n          </Button>\n        </div>\n        <div className=\"align-self-center\">\n          <span className=\"text-light\">VS</span>\n        </div>\n        \n        <div className=\"team-2\">\n          <span className=\"text-light\">Team 2</span>\n          {/* {teamTwo?.map((e) => (\n            <div className=\"card player\">\n              <div className=\"card-body\">{e}</div>\n            </div>\n          ))} */}\n          <div className=\"card player\">\n            <div className=\"card-body\">{teamTwo[0]}</div>\n          </div>\n          <div className=\"card player\">\n            <div className=\"card-body\">{teamTwo[1]}</div>\n          </div>\n          <Button type=\"submit\" className=\"nes-btn is-success mt-3 mr-3\" onClick={() => handleJoinTeam('team2')}>\n            Join\n          </Button>\n        </div>\n      </div>\n    </div>\n      )\n}\n","/home/rivari/Documents/game/Divided-We-Stand/src/components/Board.js",[],"/home/rivari/Documents/game/Divided-We-Stand/src/js/game.js",["74"],"import Phaser from 'phaser'\nimport socket from '../connection/socket'\n\n//socket\nvar gamePlayers\n\n//end socket\n\nvar audio = new Audio(require(\"../sound/PUNCH.mp3\"))\nvar music;\nvar meteor;\nvar meteor2;\nvar emitter;\nvar emitter2;\nvar rightGoal;\nvar leftGoal;\nvar particles\nvar particles2\nvar control\nvar goalSound;\nvar bgm;\nvar scorep1 = 0\nvar scorep2 = 0\nvar scoreText\nvar control1\nvar control1Hip1\nvar control2\nvar control1Hip2\nvar char1\nvar char2\n\nexport const config = () => {\n  return {\n    type: Phaser.AUTO,\n    width: \"100%\",\n    height: \"100%\",\n    backgroundColor: \"#cdcdcd\",\n    physics: {\n      default: \"arcade\",\n      arcade: {\n        // debug: true,\n        gravity: { y: 0 },\n      },\n    },\n    scene: {\n      preload: preload,\n      create: create,\n      update: update,\n      extend: { data: { socket } },\n      pack: {\n        files: [\n          {\n            type: \"scenePlugin\",\n            key: \"SpinePlugin\",\n            url: \"plugins/SpinePlugin.js\",\n            sceneKey: \"spine\",\n          },\n        ],\n      },\n    },\n    socket: socket,\n    audio: {\n      disableWebAudio: false,\n      context: audio.webkitMatchesSelector(true),\n    },\n  };\n};\n\nfunction preload() {\n    this.load.setPath('assets/spine/stretchyman/');\n    this.load.spine('stretchyman', 'stretchyman-pro.json', ['stretchyman-pma.atlas'], true);\n    this.load.image('meteor', '../../image/meteor-min.png');\n    this.load.image('particle', '../../image/api.png');\n    this.load.image('background', '../../background/blackhole.jpg');\n    this.load.image('pow', '../../image/hit.gif');\n    this.load.image('goal', '../../image/blackhole.png')\n    this.load.image('hitarea', '../../image/hitround.png')\n    this.load.audio('hit', ['../../sound/PUNCH.ogg', '../../sound/PUNCH.mp3'])\n    this.load.audio('goal', ['../../sound/selected.ogg', '../../sound/selected.mp3'])\n    this.load.audio('bgm', ['../../sound/fightSoundtrack.ogg', '../../sound/fightSoundtrack.mp3'])\n    this.data.list.socket.on('hello', data => {\n        console.log(data,  \"<<< data di socket preload\")\n        gamePlayers = data\n    })\n    console.log(this.data.list.socket, \"<<< this di preload\")\n}\n\nconsole.log(gamePlayers, \",,, game players di game\")\n\nfunction generateChar({ pos, scale, flipper }) {\n    var char = this.add.spine(pos.x, pos.y, 'stretchyman').setScale(scale.x, scale.y).refresh();\n    this.physics.add.existing(char)\n    if (flipper === true) {\n        char.body.setSize(-char.width, char.height)\n        char.body.immovable = true\n    } else {\n        char.body.setSize(char.width, char.height)\n        char.body.immovable = true\n    }\n    char.body.setCollideWorldBounds(true);\n    // char.body.setBounce(0.1, 0.1)\n    // char.drawDebug = true\n    char.refresh()\n    return char\n}\n\n// let hipX\n// let hipY\n\nfunction assignControlToChar(char, obj) {\n    var controlBones = [\"front-leg-ik-target\", \"hip\"];\n\n    // var controlBones = [\"front-leg-ik-target\", \"hip\", \"back-leg-ik-target\"];\n    if (obj === \"feet\") {\n        let bone = char.findBone(controlBones[0]);\n        var control = this.physics.add.image(bone.worldX, 670 - (bone.worldY), 'hitarea').setData('bone', bone).setScale(0.3, 0.3);\n        control.body.immovable = true\n        control.setBounce(3, 3)\n        control.setCollideWorldBounds(true)\n\n        control.setInteractive();\n\n        // this.input.setDraggable(control);\n        // this.input.on('drag', function (pointer, gameObject, dragX, dragY) {\n        //     gameObject.x = dragX;\n        //     gameObject.y = dragY;\n\n        //     var bone = gameObject.getData('bone');\n\n        //     var coords = this.spine.worldToLocal(dragX, dragY, char.skeleton, bone);\n\n        //     bone.x = coords.x;\n        //     bone.y = coords.y;\n\n        //     // hipX = bone.x\n        //     // hipY = bone.y\n\n        //     bone.update();\n        //     char.refresh()\n        // }, this);\n        return control\n    } else if (obj === \"hip\") {\n        let bone = char.findBone(controlBones[1]);\n        var controlHip = this.add.circle(bone.worldX, 800 - (bone.worldY), 10, 0xff00000).setData('bone', bone);\n        controlHip.setInteractive();\n\n        // this.input.setDraggable(controlHip);\n        // this.input.on('drag', function (pointer, gameObject, dragX, dragY) {\n\n        //     gameObject.x = dragX;\n        //     gameObject.y = dragY;\n\n        //     var bone = gameObject.getData('bone');\n\n        //     var coords = this.spine.worldToLocal(dragX, dragY, char.skeleton, bone);\n\n        //     bone.x = coords.x;\n        //     bone.y = coords.y;\n\n        //     // if(coords.x < hipX + 100 && coords.x > hipX - 100) {\n        //     //     bone.x = coords.x\n        //     // } else {\n        //     //     bone.x = hipX\n        //     // }\n\n        //     // if(coords.y < hipY + 100 && coords.y > hipY - 100) {\n        //     //     bone.y = coords.y\n        //     // } else {\n        //     //     bone.y = hipY\n        //     // }\n        //     // console.log(hipX, \"alsdhasjdhas\");\n\n        //     bone.update();\n        //     char.refresh()\n        // }, this);\n        return controlHip\n    }\n}\n\nfunction create() {\n    let image = this.add.image(\n        this.cameras.main.width / 2,\n        this.cameras.main.height / 2,\n        \"background\"\n    );\n    let scaleX = this.cameras.main.width / image.width;\n    let scaleY = this.cameras.main.height / image.height;\n    let scale = Math.max(scaleX, scaleY);\n\n    image.setScale(scale).setScrollFactor(0);\n\n\n    //SCORE\n    scoreText = this.add.text(616, 310, `${scorep1}:${scorep2}`, { fontSize: '70px', fill: '#ffffff' })\n\n    //END SCORE\n\n    //MUSIC ASSIGN\n    music = this.sound.add('hit', {\n        volume: 0.09\n    })\n\n    goalSound = this.sound.add('goal', {\n        volume: 1\n    })\n    bgm = this.sound.add('bgm', {\n        volume: 0.5\n    })\n    //ENDMUSIC ASSIGN\n\n    let char = generateChar.bind(this)\n    let control = assignControlToChar.bind(this)\n\n    char1 = char({\n        pos: { x: 400, y: 500 },\n        scale: { x: 0.3, y: 0.3 },\n        flipper: false\n    })\n    char2 = char({\n        pos: { x: 900, y: 500 },\n        scale: { x: -0.3, y: 0.3 },\n        flipper: true\n    })\n\n    control1 = control(char1, \"feet\")\n    control1Hip1 = control(char1, \"hip\")\n    control2 = control(char2, \"feet\")\n    control1Hip2 = control(char2, \"hip\")\n\n    //METEOR\n    particles = this.add.particles('particle');\n    particles2 = this.add.particles('particle');\n    emitter = particles.createEmitter({\n        speed: 100,\n        scale: { start: 0.03, end: 0 },\n        blendMode: 'NORMAL'\n    });\n    emitter2 = particles2.createEmitter({\n        speed: 100,\n        scale: { start: 0.03, end: 0 },\n        blendMode: 'NORMAL'\n    });\n\n    meteor = this.physics.add.image(100, 100, 'meteor').setScale(0.1, 0.1);\n    meteor.enableBody = true\n    meteor.setVelocity(330, 50);\n    meteor.setBounce(1, 1.05);\n    meteor.setCollideWorldBounds(true);\n\n    emitter.startFollow(meteor);\n\n    meteor2 = this.physics.add.image(1000, 100, 'meteor').setScale(0.1, 0.1);\n    meteor2.enableBody = true\n    meteor2.setVelocity(600, 50);\n    meteor2.setBounce(1, 1.05);\n    meteor2.setCollideWorldBounds(true);\n\n    emitter2.startFollow(meteor2);\n\n    //END METEOR\n\n    //GAWANG\n    leftGoal = this.physics.add.image(100, 350, 'goal').setScale(0.5, 0.5);\n    leftGoal.body.setSize(100, 100)\n    leftGoal.body.immovable = true\n    rightGoal = this.physics.add.image(1250, 350, 'goal').setScale(0.5, 0.5);\n    rightGoal.body.setSize(100, 100)\n    rightGoal.body.immovable = true\n    //END GAWANG\n\n    bgm.play()\n\n    // this.sound.setDecodedCallback(music, this);\n    this.physics.add.collider(meteor, char1, () => {\n        music.play();\n    })\n    this.physics.add.collider(meteor2, char1, () => {\n        music.play();\n    })\n    this.physics.add.collider(meteor, char2, () => {\n        music.play();\n    })\n    this.physics.add.collider(meteor2, char2, () => {\n        music.play();\n    })\n    this.physics.add.collider(char1, char2, () => {\n        console.log('kena');\n    })\n    this.physics.add.collider(meteor, control1, () => {\n        music.play();\n    })\n    this.physics.add.collider(meteor2, control1, () => {\n        music.play();\n    })\n    this.physics.add.collider(meteor, control2, () => {\n        music.play();\n    })\n    this.physics.add.collider(meteor2, control2, () => {\n        music.play();\n    })\n\n    this.data.list.socket.on('startGame', data => {\n        console.log(data,  \"<<< data di socket preload\")\n        gamePlayers = data\n    })\n\n}\n\nfunction update() {\n    meteor.rotation += 0.10;\n    meteor2.rotation += 0.10;\n    emitter.rotation += 0.10;\n    emitter2.rotation += 0.10;\n    rightGoal.rotation += 0.002;\n    leftGoal.rotation -= 0.002;\n\n    this.physics.add.collider(meteor, leftGoal, goalp2, () => {\n        meteor.destroy()\n        particles.destroy()\n        goalSound.play()\n    })\n    this.physics.add.collider(meteor2, leftGoal, goalp2, () => {\n        meteor2.destroy()\n        particles2.destroy()\n        goalSound.play()\n    })\n    this.physics.add.collider(meteor, rightGoal, goalp1, () => {\n        meteor.destroy()\n        particles.destroy()\n        goalSound.play()\n    })\n    this.physics.add.collider(meteor2, rightGoal, goalp1, () => {\n        meteor2.destroy()\n        particles2.destroy()\n        goalSound.play()\n    })\n\n    function goalp1() {\n        scorep1 += 1\n        scoreText.text = `${scorep1}:${scorep2}`\n    }\n    function goalp2() {\n        scorep2 += 1\n        scoreText.text = `${scorep1}:${scorep2}`\n    }\n\n    const players = [control1, control1Hip1, control2, control1Hip2]\n    players.forEach(el => {\n        this.input.setDraggable(el);\n        this.input.on('drag', function (pointer, gameObject, dragX, dragY) {\n            gameObject.x = dragX;\n            gameObject.y = dragY;\n    \n            var bone = gameObject.getData('bone');\n\n            let charObj\n            if (el === control1 || el === control1Hip1) {\n                charObj = char1\n            } else {\n                charObj = char2\n            }\n    \n            var coords = this.spine.worldToLocal(dragX, dragY, charObj.skeleton, bone);\n    \n            bone.x = coords.x;\n            bone.y = coords.y;\n    \n            // hipX = bone.x\n            // hipY = bone.y\n    \n            bone.update();\n            charObj.refresh()\n        }, this);\n    })\n}",{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":1,"column":27,"nodeType":"81","messageId":"82","endLine":1,"endColumn":36},{"ruleId":"79","severity":1,"message":"83","line":2,"column":10,"nodeType":"81","messageId":"82","endLine":2,"endColumn":16},{"ruleId":"79","severity":1,"message":"84","line":2,"column":18,"nodeType":"81","messageId":"82","endLine":2,"endColumn":27},{"ruleId":"79","severity":1,"message":"85","line":4,"column":8,"nodeType":"81","messageId":"82","endLine":4,"endColumn":14},{"ruleId":"79","severity":1,"message":"84","line":2,"column":18,"nodeType":"81","messageId":"82","endLine":2,"endColumn":27},{"ruleId":"79","severity":1,"message":"86","line":4,"column":10,"nodeType":"81","messageId":"82","endLine":4,"endColumn":20},{"ruleId":"87","severity":1,"message":"88","line":44,"column":6,"nodeType":"89","endLine":44,"endColumn":8,"suggestions":"90"},{"ruleId":"79","severity":1,"message":"84","line":2,"column":10,"nodeType":"81","messageId":"82","endLine":2,"endColumn":19},{"ruleId":"79","severity":1,"message":"91","line":8,"column":11,"nodeType":"81","messageId":"82","endLine":8,"endColumn":19},{"ruleId":"87","severity":1,"message":"92","line":27,"column":6,"nodeType":"89","endLine":27,"endColumn":18,"suggestions":"93"},{"ruleId":"79","severity":1,"message":"91","line":8,"column":13,"nodeType":"81","messageId":"82","endLine":8,"endColumn":21},{"ruleId":"79","severity":1,"message":"94","line":9,"column":12,"nodeType":"81","messageId":"82","endLine":9,"endColumn":22},{"ruleId":"79","severity":1,"message":"80","line":1,"column":17,"nodeType":"81","messageId":"82","endLine":1,"endColumn":26},{"ruleId":"79","severity":1,"message":"95","line":2,"column":10,"nodeType":"81","messageId":"82","endLine":2,"endColumn":14},{"ruleId":"79","severity":1,"message":"96","line":7,"column":39,"nodeType":"81","messageId":"82","endLine":7,"endColumn":45},{"ruleId":"79","severity":1,"message":"97","line":19,"column":5,"nodeType":"81","messageId":"82","endLine":19,"endColumn":12},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Container' is defined but never used.","'socket' is defined but never used.","'useHistory' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'state.rooms'. Either include them or remove the dependency array.","ArrayExpression",["100"],"'roomName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["101"],"'roomDetail' is assigned a value but never used.","'Card' is defined but never used.","'status' is assigned a value but never used.","'control' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},"Update the dependencies array to be: [dispatch, state.rooms]",{"range":"106","text":"107"},"Update the dependencies array to be: [history, roomDetail]",{"range":"108","text":"109"},[1301,1303],"[dispatch, state.rooms]",[895,907],"[history, roomDetail]"]